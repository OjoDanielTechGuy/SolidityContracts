//SPDX-License-Identifier: MIT

pragma solidity ^0.8.14;

/**Block Explorers And Source Code Verification
==============================================
* it is considered good practice to open source the source code. 
* Your bytecode is there anyways. 
* But having the source code there is an additional step towards transparency.
*/

contract VerificationOfContract {

/** STEPS TO VERIFY CONTRACT ON ETHERSCAN
* =====================================
* 1. Sign in to Etherscan.
* 2. Open Remix, Deploy the contract code using "Injected Provider Metamask" and confirm transaction via Metamask pop up.
* 3. After deployment Click "View on Etherscan" in the console section to open the  transaction on Etherscan .
* 4. In the Etherscan web page click on the new Contract (the address) to open the contract.
* 5. Then click on the Contract - you see its just bytecode there. Etherscan can't guess your interface, your function names.
* 6. Verify that Smart Contract, Click "Verify and Publish".
* 7. Select the compiler version used, the license, also select solidity single-file from the compiler
* 8. Click on continue.
* 9. Copy the source code from remix into the source code field in Etherscan web page.
* 10. Sometimes you need to specify the compiler optimizations. To check if you had any, head back to Remix, and click "Advanced Configurations" in the compiler plugin.
* 11. If this checkbox is checked, then set the appropriate optimizations in Etherscan as well.
* 12. Finally click on verify
* 13. It should display "Successfully generated ByteCode and ABI for Contract Address"
* 14. Click on your contract address to get back
* 15. Click "Contract" - which now has a little check next to it then click on Read contract
* 16. The functions of the contract will be visible in order to interact with
* 17. Let's interact with our smart contract. Click "Write Contract" then Click "Connect to Web3"
* 18. Confirm the dialog box and select Metamask from the options
* 19. Select the testnet account from the Metamask popup and connect
* 20. Depending on the function in your contract, manipulate your functions
* 21. Click "Write" to continue after manipulation and confirm from Metamask to continue
* 22. To get manipulated functions Click on "Read Contract" then open the functions and verify by clicking on "query"
*/
    
    mapping (address => uint) public balance;

    //on start on smart contract balance is 100    
    constructor() {
        balance[msg.sender] = 100;
    }

    function transfer(address _to, uint _amount) public {
        balance[msg.sender] -= _amount;
        balance[_to] += _amount;
    }

    function CrypticFunctionName(address _addr) public view returns(uint) {
        return balance[_addr];
    }
}